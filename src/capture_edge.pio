/**
 * Copyright (c) 2022, Daniel Gorbea
 * All rights reserved.
 *
 * This source code is licensed under the MIT-style license found in the
 * LICENSE file in the root directory of this source tree. 
 */

.define PIN_COUNT 2

.define ZERO_COUNT 32-PIN_COUNT

.program capture_edge
intr:
    mov osr isr        // bk counter
    mov isr ~isr
    push noblock       // send counter
    mov isr x
    push noblock       // send pins
    mov isr y
    push noblock       // send prev
    mov y osr          // restore counter
    mov osr x          // pins to prev
    irq 0              // capture irq
    jmp y-- loop       // adjust counter
loop:
    in pins PIN_COUNT  // read pins
    in null ZERO_COUNT // fill with zeros
    mov x isr          // pins to x
    mov isr y          // bk counter
    mov y osr          // prev to y
    jmp x!=y intr      // capture irq
    mov y isr          // restore counter
    mov osr x          // prev to osr
    jmp y-- loop  [8]  // counter decrement every 9+8=17 cycles
public start:
    mov y ~null        // init counter
    jmp loop

% c-sdk {

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "hardware/irq.h"

#define PIN_COUNT 2

#define COUNTER_CYCLES 17

typedef enum edge_type_t
{
    EDGE_NONE,
    EDGE_FALL,
    EDGE_RISE
} edge_type_t;

typedef void (*capture_handler_t)(uint counter, edge_type_t edge);

uint sm_capture_edge;
PIO pio_capture_edge;
void (*capture_handler[PIN_COUNT])(uint counter, edge_type_t edge) = {NULL};

static inline uint capture_edge_init(PIO pio, uint pin_base, float clk_div);
void capture_edge_set_irq(uint pin, capture_handler_t handler);
void on_capture_edge();
uint get_captured_edge(uint pin, uint pins, uint prev);
static inline uint bit_value(uint pos);

static inline uint capture_edge_init(PIO pio, uint pin_base, float clk_div)
{
    pio_capture_edge = pio;
    uint pio_irq0 = (pio == pio0 ? PIO0_IRQ_0 : PIO1_IRQ_0);
    uint offset;
    offset = pio_add_program(pio, &capture_edge_program);
    sm_capture_edge = pio_claim_unused_sm(pio, true);

    pio_sm_config c = capture_edge_program_get_default_config(offset);
    sm_config_set_clkdiv(&c, clk_div);
    sm_config_set_in_pins(&c, pin_base);
    pio_set_irq0_source_enabled(pio, pis_interrupt0, true);
    pio_interrupt_clear(pio, sm_capture_edge);
    pio_sm_init(pio, sm_capture_edge, offset + capture_edge_offset_start, &c);
    pio_sm_set_enabled(pio, sm_capture_edge, true);
    irq_set_exclusive_handler(pio_irq0, on_capture_edge);
    irq_set_enabled(pio_irq0, true);
    pio_capture_edge = pio;
    return sm_capture_edge;
}

void on_capture_edge()
{
    static uint counter_prev = 0;
    if (pio_sm_is_rx_fifo_full(pio_capture_edge, sm_capture_edge))
    {
        pio_sm_clear_fifos(pio_capture_edge, sm_capture_edge);
        return;
    }
    uint counter = pio_sm_get_blocking(pio_capture_edge, sm_capture_edge);
    uint pins = pio_sm_get_blocking(pio_capture_edge, sm_capture_edge);
    uint prev = pio_sm_get_blocking(pio_capture_edge, sm_capture_edge);

    for (uint pin = 0; pin < PIN_COUNT; pin++)
    {
        edge_type_t edge = get_captured_edge(pin, pins, prev);
        if (edge && *capture_handler[pin])
        {
            capture_handler[pin](counter, edge);
        }
    }

    pio_interrupt_clear(pio_capture_edge, 0);
}

uint get_captured_edge(uint pin, uint pins, uint prev)
{
    // printf("\n%u %u %u %u %u %u", pin, pins, prev, (bit_value(pin) & pins), (pin & prev), (bit_value(pin) & pins));
    if ((bit_value(pin) & pins) ^ (bit_value(pin) & prev) && (bit_value(pin) & pins))
        return EDGE_RISE;
    if ((bit_value(pin) & pins) ^ (bit_value(pin) & prev) && !(bit_value(pin) & pins))
        return EDGE_FALL;
    return EDGE_NONE;
}

void capture_edge_set_irq(uint pin, capture_handler_t handler)
{
    if (pin < PIN_COUNT)
    {
        capture_handler[pin] = handler;
    }
}

static inline uint bit_value(uint pos)
{
    return 1 << pos;
}

%}